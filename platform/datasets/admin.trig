@prefix def:	<https://w3id.org/atomgraph/linkeddatahub/default#> .
@prefix ldh:	<https://w3id.org/atomgraph/linkeddatahub#> .
@prefix ac:	<https://w3id.org/atomgraph/client#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix dh:	<https://www.w3.org/ns/ldt/document-hierarchy#> .
@prefix sd:     <http://www.w3.org/ns/sparql-service-description#> .
@prefix sp:	<http://spinrdf.org/sp#> .
@prefix sioc:	<http://rdfs.org/sioc/ns#> .
@prefix foaf:	<http://xmlns.com/foaf/0.1/> .
@prefix dct:	<http://purl.org/dc/terms/> .
@prefix spin:	<http://spinrdf.org/spin#> .

<>
{

    <> a def:Root ;
        dct:title "Root" ;
        dct:description "Root container" ;
        rdf:_1 <#select-children> .

    <#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

# ENDPOINTS

<sparql>
{

    <sparql> a foaf:Document ;
        dct:title "SPARQL endpoint" .

}

<ns>
{

    <ns> a foaf:Document ;
        dct:title "Namespace endpoint" .

}

<add>
{

    <add> a foaf:Document ;
        dct:title "Add data endpoint" .

}

<generate>
{

    <generate> a foaf:Document ;
        dct:title "Generate data endpoint" .

}

<access>
{

    <access> a foaf:Document ;
        dct:title "Access endpoint" .

}

<access/request>
{

    <access/request> a foaf:Document ;
        dct:title "Access request endpoint" .

}

# CONTAINERS

<queries/>
{

    <queries/> a dh:Container ;
        dct:title "Queries" ;
        dct:description "SPARQL queries" ;
        rdf:_1 <queries/#select-queries> .

    <queries/#select-queries> a ldh:Object ;
        rdf:value <queries/#select-queries-view> .

    <queries/#select-queries-view> a ldh:View ;
        dct:title "Queries" ;
        spin:query <queries/#select-queries-query> .

    <queries/#select-queries-query> a sp:Select ;
        dct:title "Select query resources" ;
        sp:text """PREFIX  sp:  <http://spinrdf.org/sp#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      {   { ?s  a  sp:Select }
        UNION
          { ?s  a  sp:Construct }
        UNION
          { ?s  a  sp:Describe }
        UNION
          { ?s  a  sp:Ask }
      }
  }""" .

}

<queries/select-instances/>
{

    <queries/select-instances/> a dh:Item ;
        sioc:has_container <queries/> ;
        dct:title "Select instances" ;
        foaf:primaryTopic <queries/select-instances/#this> .

    <queries/select-instances/#this> a sp:Select ;
        dct:title "Select instances" ;
        dct:description "Selects instances of type from the default graph" ;
        sp:text """SELECT DISTINCT ?s
WHERE
  { ?s  a   $type ;
        ?p  ?o
  }""" .

}

<queries/select-instances-in-graphs/>
{

    <queries/select-instances-in-graphs/> a dh:Item ;
        sioc:has_container <queries/> ;
        dct:title "Select instances in graphs" ;
        foaf:primaryTopic <queries/select-instances-in-graphs/#this> .

    <queries/select-instances-in-graphs/#this> a sp:Select ;
        dct:title "Select instances in graphs" ;
        dct:description "Selects instances of type from named graphs" ;
        sp:text """SELECT DISTINCT ?s
WHERE
  { GRAPH ?g
      { ?s  a   $type ;
            ?p  ?o
      }
  }""" .

}

<files/>
{

    <files/> a dh:Container ;
        dct:title "Files" ;
        dct:description "Uploaded files" ;
        rdf:_1 <files/#select-files> .

    <files/#select-files> a ldh:Object ;
        rdf:value <files/#select-files-view> .

    <files/#select-files-view> a ldh:View ;
        dct:title "Files" ;
        spin:query <files/#select-files-query> .

    <files/#select-files-query> a sp:Select ;
        dct:title "Select file resources" ;
        sp:text """PREFIX  nfo:  <http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      { ?s  a  nfo:FileDataObject }
  }""" .

}

<imports/>
{

    <imports/> a dh:Container ;
        dct:title "Imports" ;
        dct:description "Data imports" ;
        rdf:_1 <imports/#select-imports> .

    <imports/#select-imports> a ldh:Object ;
        rdf:value <imports/#select-imports-view> .

    <imports/#select-imports-view> a ldh:View ;
        dct:title "Imports" ;
        spin:query <imports/#select-imports-query> .

    <imports/#select-imports-query> a sp:Select ;
        dct:title "Select import resources" ;
        sp:text """PREFIX  ldh:  <https://w3id.org/atomgraph/linkeddatahub#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      {   { ?s  a  ldh:CSVImport }
        UNION
          { ?s  a  ldh:RDFImport }
      }
  }""" .

}

<geo/>
{

    <geo/> a dh:Item ;
        dct:title "Geo" ;
        dct:description "Geolocated resources" ;
        rdf:_1 <geo/#select-geo> .

    <geo/#select-geo> a ldh:Object ;
        rdf:value <geo/#select-geo-view> .

    <geo/#select-geo-view> a ldh:View ;
        dct:title "Geo resources" ;
        spin:query <geo/#select-geo-query> ;
        ac:mode ac:MapMode .

    <geo/#select-geo-query> a sp:Select ;
        dct:title "Select geo resources" ;
        sp:text """PREFIX  geo:  <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX  dct:  <http://purl.org/dc/terms/>

SELECT  DISTINCT ?resource
WHERE
{ GRAPH ?graph
  { ?resource  geo:lat  ?lat ;
              geo:long  ?long
    OPTIONAL
      { ?resource  a                    ?type }
    OPTIONAL
      { ?resource  dct:title  ?title }
  }
}
ORDER BY ?title""" .

}

<latest/>
{

    <latest/> a dh:Item ;
        dct:title "Latest" ;
        dct:description "Latest resources" ;
        rdf:_1 <latest/#select-latest> .

    <latest/#select-latest> a ldh:Object ;
        rdf:value <latest/#select-latest-view> .

    <latest/#select-latest-view> a ldh:View ;
        dct:title "Latest resources" ;
        spin:query <latest/#select-latest-query> .

    <latest/#select-latest-query> a sp:Select ;
        dct:title "Select latest" ;
        sp:text """PREFIX  dct:  <http://purl.org/dc/terms/>

SELECT DISTINCT  ?dated
WHERE
{ GRAPH ?graph
  { ?dated  dct:created  ?created }
}
ORDER BY DESC(?created)""" .

}

<charts/>
{

    <charts/> a dh:Container ;
        dct:title "Charts" ;
        dct:description "Saved charts" ;
        rdf:_1 <charts/#select-charts> .

    <charts/#select-charts> a ldh:Object ;
        rdf:value <charts/#select-charts-view> .

    <charts/#select-charts-view> a ldh:View ;
        dct:title "Charts" ;
        spin:query <charts/#select-charts-query> .

    <charts/#select-charts-query> a sp:Select ;
        dct:title "Select chart resources" ;
        sp:text """PREFIX  ldh:  <https://w3id.org/atomgraph/linkeddatahub#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      {   { ?s  a  ldh:GraphChart }
        UNION
          { ?s  a  ldh:ResultSetChart }
      }
  }""" .

}

<apps/>
{

    <apps/> a dh:Container ;
        dct:title "Apps" ;
        dct:description "Linked Data applications" ;
        rdf:_1 <apps/#select-apps> .

    <apps/#select-apps> a ldh:Object ;
        rdf:value <apps/#select-apps-view> .

    <apps/#select-apps-view> a ldh:View ;
        dct:title "Applications" ;
        spin:query <apps/#select-apps-query> .

    <apps/#select-apps-query> a sp:Select ;
        dct:title "Select application resources" ;
        sp:text """PREFIX  lapp: <https://w3id.org/atomgraph/linkeddatahub/apps#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      { ?s  a  lapp:Application }
  }""" .

}

<services/>
{

    <services/> a dh:Container ;
        dct:title "Services" ;
        dct:description "SPARQL services" ;
        rdf:_1 <services/#select-services> .

    <services/#select-services> a ldh:Object ;
        rdf:value <services/#select-services-view> .

    <services/#select-services-view> a ldh:View ;
        dct:title "Services" ;
        spin:query <services/#select-services-query> .

    <services/#select-services-query> a sp:Select ;
        dct:title "Select service resources" ;
        sp:text """PREFIX  sd:   <http://www.w3.org/ns/sparql-service-description#>

SELECT DISTINCT  ?s
WHERE
  { GRAPH ?g
      { ?s  a  sd:Service }
  }""" .

}

<services/dbpedia/>
{

    <services/dbpedia/> a dh:Item ;
        sioc:has_container <queries/> ;
        dct:title "DBPedia" ;
        foaf:primaryTopic <services/dbpedia/#this> .

    <services/dbpedia/#this>
        a sd:Service ;
        dct:title "DBPedia" ;
        dct:description "Public SPARQL endpoint providing access to the DBpedia knowledge base, a crowd-sourced community effort to extract structured information from Wikipedia and make this information available on the Web." ;
        sd:endpoint <https://dbpedia.org/sparql> ;
        sd:supportedLanguage sd:SPARQL11Query .

}

<services/wikidata/>
{

    <services/wikidata/> a dh:Item ;
        sioc:has_container <queries/> ;
        dct:title "Wikidata" ;
        foaf:primaryTopic <services/wikidata/#this> .

    <services/wikidata/#this>
        a sd:Service ;
        dct:title "Wikidata" ;
        dct:description "Public SPARQL endpoint providing access to Wikidata, a free and open knowledge base that acts as central storage for the structured data of Wikimedia projects including Wikipedia, Wikivoyage, Wiktionary, Wikisource, and others." ;
        sd:endpoint <https://query.wikidata.org/sparql> ;
        sd:supportedLanguage sd:SPARQL11Query .

}

### ADMIN-SPECIFIC

@prefix lacl:	<https://w3id.org/atomgraph/linkeddatahub/admin/acl#> .
@prefix adm:	<https://w3id.org/atomgraph/linkeddatahub/admin#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:	<http://www.w3.org/2002/07/owl#> .
@prefix acl:	<http://www.w3.org/ns/auth/acl#> .
@prefix cert:	<http://www.w3.org/ns/auth/cert#> .
@prefix spin:	<http://spinrdf.org/spin#> .

<sign%20up>
{

    <sign%20up> a adm:SignUp ;
        dct:title "Sign up" ;
        rdf:_1 <sign%20up#content> .

    <sign%20up#content> a ldh:XHTML ;
        rdf:value """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">Welcome. Create your free account and join the web of data.</p>
    <p>LinkedDataHub uses WebID as the single sign-on (SSO) protocol for distributed applications, which is based on
        authentication using client certficates. <a href="http://webid.info">Read more about WebID</a>.</p>
    <div class="alert alert-info">
        <p>Unlike most LinkedDataHub resources, your WebID profile will have <em>public access</em> as required by the
        protocol. We will hide your email address however.</p>
    </div>
    </div>"""^^rdf:XMLLiteral .

}

# ENDPOINTS

<clear>
{

    <clear> a foaf:Document ;
        dct:title "Clear ontology endpoint" .

}

<transform>
{

    <transform> a foaf:Document ;
        dct:title "Transform/import endpoint" .

}

<oauth2/login>
{

    <oauth2/login> a foaf:Document ;
        dct:title "OAuth 2.0 login" .

}

<oauth2/authorize/google>
{

    <oauth2/authorize/google> a foaf:Document ;
        dct:title "Google OAuth2.0 authorization" .

}

<queries/construct-constructors/>
{

    <queries/construct-constructors/> a dh:Item ;
        sioc:has_container <queries/> ;
        dct:title "Construct constructors" ;
        foaf:primaryTopic <queries/construct-constructors/#this> .

    <queries/construct-constructors/#this> a sp:Construct ;
        rdfs:label "Construct constructors" ;
        rdfs:comment "Infers class constructors from the ontology properties" ;
        sp:text """
PREFIX  ldh:  <https://w3id.org/atomgraph/linkeddatahub#>
PREFIX  rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX  owl:  <http://www.w3.org/2002/07/owl#>
PREFIX  sp:   <http://spinrdf.org/sp#>
PREFIX  spin: <http://spinrdf.org/spin#>

CONSTRUCT 
  {
    ?class rdfs:isDefinedBy ?ontology .
    ?class spin:constructor ?constructor .
    ?constructor a ldh:Constructor .
    ?constructor rdfs:isDefinedBy ?ontology .
    ?constructor rdfs:label ?constructorLabel .
    ?constructor sp:text ?constructorString .
  }
WHERE
  { { SELECT  ?class (concat("CONSTRUCT {\\n    ", GROUP_CONCAT(?propConstructor ; separator=' .\\n    '), "\\n}\\n{}") AS ?constructorString)
      WHERE
        { { SELECT DISTINCT  ?class ?prop ?range
            WHERE
              {   { ?class  a  owl:Class }
                UNION
                  { ?class  a  rdfs:Class }
                { ?prop  rdfs:domain  ?domain }
                FILTER ( ( ?domain = ?class ) || ( ( ?domain = owl:Thing ) && NOT EXISTS { ?class (rdfs:subClassOf)* ?superClass
                                                                                           FILTER ( ?class != ?superClass )
                                                                                         } ) )
                { ?prop  rdfs:range  ?range }
                FILTER (isURI(?range))
              }
            ORDER BY ?class ?prop ?range
          }
          BIND(concat("$this <", str(?prop), "> [ a <", str(?range), "> ]") AS ?propConstructor)
        }
      GROUP BY ?class
    }
    OPTIONAL
      { ?class  rdfs:label  ?classLabel
        FILTER langMatches(lang(?classLabel), "en")
        BIND(concat(?classLabel, " constructor") AS ?constructorLabel)
      }
    OPTIONAL
      {
        ?ontology  a  owl:Ontology
      }
    BIND(bnode() AS ?constructor)
  }
    """ .

}

### ACL ###

<acl/>
{

    <acl/> a dh:Container ;
        sioc:has_parent <> ;
        dct:title "Access control" ;
        dct:description "Manage agents, user accounts and authorizations" ;
        rdf:_1 <acl/#select-children> .

    <acl/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/authorizations/>
{

    <acl/authorizations/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Authorizations" ;
        dct:description "Manage who has access to which resources" ;
        rdf:_1 <acl/authorizations/#select-children> .

    <acl/authorizations/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/authorization-requests/>
{

    <acl/authorization-requests/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Authorization requests" ;
        dct:description "Manage requests for access" ;
        rdf:_1 <acl/authorization-requests/#select-children> .

    <acl/authorization-requests/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/agents/>
{

    <acl/agents/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Agents" ;
        dct:description "Manage people and software agents that have access" ;
        rdf:_1 <acl/agents/#select-children> .

    <acl/agents/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/public-keys/>
{

    <acl/public-keys/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Public keys" ;
        dct:description "Manage RSA public keys" ;
        rdf:_1 <acl/public-keys/#select-children> .

    <acl/public-keys/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/users/>
{

    <acl/users/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Users" ;
        dct:description "Manage agent user accounts and credentials" ;
        rdf:_1 <acl/users/#select-children> .

    <acl/users/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

<acl/groups/>
{

    <acl/groups/> a dh:Container ;
        sioc:has_parent <acl/> ;
        dct:title "Groups" ;
        dct:description "Manage agent groups that have access" ;
        rdf:_1 <acl/groups/#select-children> .

    <acl/groups/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}

# AUTHORIZATIONS

# access endpoint

<acl/authorizations/access/>
{

    <acl/authorizations/access/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Access description access" ;
        foaf:primaryTopic <acl/authorizations/access/#this> .

    <acl/authorizations/access/#this> a acl:Authorization ;
        rdfs:label "Access description access" ;
        rdfs:comment "Allows non-authenticated access" ;
        acl:accessTo <access> ;
        acl:mode acl:Read ;
        acl:agentClass foaf:Agent, acl:AuthenticatedAgent .

}

# access request endpoint

<acl/authorizations/access-request/>
{

    <acl/authorizations/access-request/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Access request access" ;
        foaf:primaryTopic <acl/authorizations/access-request/#this> .

    <acl/authorizations/access-request/#this> a acl:Authorization ;
        rdfs:label "Access request access" ;
        rdfs:comment "Allows non-authenticated access" ;
        acl:accessTo <access/request> ;
        acl:mode acl:Append ;
        acl:agentClass foaf:Agent, acl:AuthenticatedAgent .

}

# sign up

<acl/authorizations/sign-up/>
{

    <acl/authorizations/sign-up/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Signup access" ;
        foaf:primaryTopic <acl/authorizations/sign-up/#this> .

    <acl/authorizations/sign-up/#this> a acl:Authorization ;
        rdfs:label "Signup access" ;
        rdfs:comment "Required to enable public signup" ;
        acl:accessTo <ns> ; # TO-DO: only allow <ns> access by the secretary agent?
        acl:accessToClass adm:SignUp ;
        acl:mode acl:Read, acl:Append ;
        acl:agentClass foaf:Agent .

}

# OAuth2 login

<acl/authorizations/oauth2-login/>
{

    <acl/authorizations/oauth2-login/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "OAuth2 login access" ;
        foaf:primaryTopic <acl/authorizations/oauth2-login/#this> .

    <acl/authorizations/oauth2-login/#this> a acl:Authorization ;
        rdfs:label "OAuth2 login access" ;
        rdfs:comment "Required to enable public OAuth2 login" ;
        acl:accessTo <oauth2/login> ;
        acl:mode acl:Read ;
        acl:agentClass foaf:Agent .

}

# Google authorization

<acl/authorizations/authorize-google/>
{

    <acl/authorizations/authorize-google/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Google's OAuth2 authorization" ;
        foaf:primaryTopic <acl/authorizations/authorize-google/#this> .

    <acl/authorizations/authorize-google/#this> a acl:Authorization ;
        rdfs:label "Google's OAuth2 authorization" ;
        rdfs:comment "Required to enable public OAuth2 login" ;
        acl:accessTo <oauth2/authorize/google> ;
        acl:mode acl:Read ;
        acl:agentClass foaf:Agent .

}

# append authorization request

<acl/authorizations/append-request/>
{

    <acl/authorizations/append-request/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Append authorization request" ;
        foaf:primaryTopic <acl/authorizations/append-request/#this> .

    <acl/authorizations/append-request/#this> a acl:Authorization ;
        rdfs:label "Append authorization request" ;
        rdfs:comment "Required to enable authorization requests" ;
        acl:accessTo <acl/authorization-requests/> ;
        acl:mode acl:Append ;
        acl:agentClass acl:AuthenticatedAgent . # not public, Agent must be authenticated

}

# full access

<acl/authorizations/full-control/>
{

    <acl/authorizations/full-control/> a dh:Item ;
        sioc:has_container <acl/authorizations/> ;
        dct:title "Full control" ;
        foaf:primaryTopic <acl/authorizations/full-control/#this> .

    <acl/authorizations/full-control/#this> a acl:Authorization ;
        rdfs:label "Full control" ;
        rdfs:comment "Allows full read/write access to all application resources" ;
        acl:accessToClass dh:Item, dh:Container, def:Root ;
        acl:accessTo <clear>, <transform> ;
        acl:mode acl:Read, acl:Append, acl:Write, acl:Control ;
        acl:agentGroup <acl/groups/owners/#this> .

}

# GROUPS

# owners

<acl/groups/owners/>
{

    <acl/groups/owners/> a dh:Item ;
        sioc:has_container <acl/groups/> ;
        dct:title "Owners" ;
        foaf:primaryTopic <acl/groups/owners/#this> .

    <acl/groups/owners/#this> a foaf:Group ;
        foaf:name "Owners" ;
        dct:description "Group of agents that own the application" .

}

# writers

<acl/groups/writers/>
{

    <acl/groups/writers/> a dh:Item ;
        sioc:has_container <acl/groups/> ;
        dct:title "Writers" ;
        foaf:primaryTopic <acl/groups/writers/#this> .

    <acl/groups/writers/#this> a foaf:Group ;
        foaf:name "Writers" ;
        dct:description "Group of agents that have write access" .

}

# readers

<acl/groups/readers/>
{

    <acl/groups/readers/> a dh:Item ;
        sioc:has_container <acl/groups/> ;
        dct:title "Readers" ;
        foaf:primaryTopic <acl/groups/readers/#this> .

    <acl/groups/readers/#this> a foaf:Group ;
        foaf:name "Readers" ;
        dct:description "Group of agents that have read access" .

}

### ONTOLOGIES ###

# CONTAINERS

<ontologies/>
{

    <ontologies/> a dh:Container ;
        sioc:has_parent <> ;
        dct:title "Ontologies" ;
        dct:description "Manage ontologies that define application domain" ;
        rdf:_1 <ontologies/#select-children> .

    <ontologies/#select-children> a ldh:Object ;
        rdf:value ldh:ChildrenView .

}
