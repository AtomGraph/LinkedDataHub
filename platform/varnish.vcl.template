vcl 4.0;

import std;

backend default {
    .host = "${BACKEND_HOST}";
    .port = "${BACKEND_PORT}";
    .first_byte_timeout = 60s;
}

acl local {
    "localhost";
    "${CLIENT_HOST}";
}

sub vcl_recv {
    if (req.method == "PURGE") {
        if (!client.ip ~ local) {
            return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
        }
        return (purge);
    }

    if (req.method == "BAN") { # supports only 2 URIs!
        if (!client.ip ~ local) {
            return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
        }

        set req.http.X-Escaped-Request-URI-1 = regsub(req.http.X-Escaped-Request-URI, ",.*$", ""); # remove header value after comma
        set req.http.X-Escaped-Request-URI-2 = regsub(req.http.X-Escaped-Request-URI, "^.*,", ""); # remove header value before comma
        ban("req.url ~ " + req.http.X-Escaped-Request-URI-1);
        ban("req.url ~ " + req.http.X-Escaped-Request-URI-2);
        return (synth(200, "Banned"));
    }

    if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE" &&
      req.method != "PATCH") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }

    if (req.method != "GET" && req.method != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return (pass);
    }

    if (req.http.Cookie) {
        # explicitly allow only cookies required by LDH server-side
        set req.http.Cookie = ";" + req.http.Cookie;
        set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
        set req.http.Cookie = regsuball(req.http.Cookie, ";(LinkedDataHub\.state|LinkedDataHub\.id_token)=", "; \1=");
        set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
        set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

        if (req.http.Cookie ~ "LinkedDataHub\.id_token=") {
            # Extract the LinkedDataHub.id_token value
            set req.http.X-LinkedDataHub-Id-Token = regsub(req.http.Cookie, ".*LinkedDataHub\.id_token=([^; ]+).*", "\1");
        }

        if (req.http.cookie ~ "^\s*$") {
            unset req.http.cookie;
        }
    }

    return (hash);
}

sub vcl_hash {
    hash_data(req.url);
    hash_data(req.http.Host);

    # include the client certificate in the hash, if it exists
    if (req.http.Client-Cert) {
        hash_data(req.http.Client-Cert);
    }

    # include LinkedDataHub.id_token cookie value in the hash, if it exists
    if (req.http.X-LinkedDataHub-Id-Token) {
        hash_data(req.http.X-LinkedDataHub-Id-Token);
    }

    return (lookup);
}

sub vcl_backend_response {
    /* purge URLs after updates */
    if ((beresp.status == 200 || beresp.status == 201 || beresp.status == 204) && bereq.method ~ "POST|PUT|DELETE|PATCH") {
        set beresp.http.X-LinkedDataHub = "Banned";
        ban("req.url == " + bereq.url + " && req.http.host == " + bereq.http.host);
    }

    return (deliver);
}