secrets:
  owner_cert_password:
    file: ./secrets/owner_cert_password.txt
  secretary_cert_password:
    file: ./secrets/secretary_cert_password.txt
  client_truststore_password:
    file: ./secrets/client_truststore_password.txt
  #google_client_id:
  #  file: ./secrets/google_client_id.txt
  #google_client_secret:
  #  file: ./secrets/google_client_secret.txt
services:
  nginx:
    image: nginx:1.23.3
    mem_limit: 128m
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
    depends_on:
      linkeddatahub:
        condition: service_healthy
    ports:
      - ${HTTP_PORT}:8080 # allow Tomcat to do HTTP to HTTPS redirect
      - ${HTTPS_PORT}:8443 # HTTPS
      - ${HTTPS_CLIENT_CERT_PORT:-5443}:9443 # HTTPS client cert
    volumes:
      - ./ssl/server:/etc/nginx/ssl:ro
  linkeddatahub:
    user: root # otherwise the ldh user does not have permissions to the mounted folder which is owner by root
    build: .
    mem_limit: 2048m
    depends_on:
      - fuseki-admin
      - fuseki-end-user
    environment:
    #  - JPDA_ADDRESS=*:8000 # debugger host - performance hit when enabled
      - CATALINA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75 --add-exports java.base/sun.security.tools.keytool=ALL-UNNAMED # heap will use up to 75% of container's RAM
      - TZ="Europe/Copenhagen"
      #- CATALINA_OPTS="-Duser.timezone=Europe/Copenhagen"
      - PROXY_HOST=nginx
      - PROXY_PORT=9443
      - PROTOCOL=${PROTOCOL}
      - HOST=${HOST}
      - ABS_PATH=${ABS_PATH}
      - HTTP_SCHEME=https
      - HTTP_PORT=7070
      - HTTP_PROXY_NAME=${HOST}
      - HTTP_PROXY_PORT=${HTTPS_PORT}
      - HTTP_REDIRECT_PORT=${HTTPS_PORT}
      - HTTPS_PROXY_PORT=${HTTPS_PORT}
      - HTTPS=false
      - SELF_SIGNED_CERT=true # only on localhost
      - SIGN_UP_CERT_VALIDITY=180
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-2097152}
      - NOTIFICATION_ADDRESS=LinkedDataHub <notifications@localhost>
      - MAIL_SMTP_HOST=email-server
      - MAIL_SMTP_PORT=25
      - MAIL_USER=linkeddatahub@localhost
      - OWNER_MBOX=${OWNER_MBOX}
      #- OWNER_URI=${OWNER_URI}
      - OWNER_GIVEN_NAME=${OWNER_GIVEN_NAME}
      - OWNER_FAMILY_NAME=${OWNER_FAMILY_NAME}
      - OWNER_ORG_UNIT=${OWNER_ORG_UNIT}
      - OWNER_ORGANIZATION=${OWNER_ORGANIZATION}
      - OWNER_LOCALITY=${OWNER_LOCALITY}
      - OWNER_STATE_OR_PROVINCE=${OWNER_STATE_OR_PROVINCE}
      - OWNER_COUNTRY_NAME=${OWNER_COUNTRY_NAME}
    secrets:
      - owner_cert_password
      - secretary_cert_password
      - client_truststore_password
      #- google_client_id
      #- google_client_secret
    volumes:
      - /var/linkeddatahub/oidc
      - ./ssl/server:/var/linkeddatahub/ssl/server:ro
      - ./ssl/owner:/var/linkeddatahub/ssl/owner
      - ./ssl/secretary:/var/linkeddatahub/ssl/secretary
      - ./datasets/owner:/var/linkeddatahub/datasets/owner
      - ./datasets/secretary:/var/linkeddatahub/datasets/secretary
      - ./uploads:/var/www/linkeddatahub/uploads
      - ./config/dev.log4j.properties:/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/log4j.properties:ro
      - ./config/system.trig:/var/linkeddatahub/datasets/system.trig:ro
  fuseki-admin:
    image: atomgraph/fuseki:4.7.0
    user: root # otherwise fuseki user does not have permissions to the mounted folder which is owner by root
    expose:
      - 3030
    volumes:
      - ./config/fuseki/config.ttl:/fuseki/config.ttl:ro
      - ./data/admin:/fuseki/databases
    command: [ "--config", "/fuseki/config.ttl" ]
  fuseki-end-user:
    image: atomgraph/fuseki:4.7.0
    user: root # otherwise the fuseki user does not have permissions to the mounted folder which is owner by root
    expose:
      - 3030
    volumes:
      - ./config/fuseki/config.ttl:/fuseki/config.ttl:ro
      - ./data/end-user:/fuseki/databases
    command: [ "--config", "/fuseki/config.ttl" ]
  varnish-frontend:
    image: varnish:7.3.0
    user: root # otherwise varnish user does not have permissions to the mounted folder which is owner by root
    configs:
      - source: varnish-frontend_vcl
        target: /etc/varnish/default.vcl
    depends_on:
      - linkeddatahub
    tmpfs: /var/lib/varnish/varnishd:exec
    environment:
      - VARNISH_HTTP_PORT=6060
      - VARNISH_SIZE=1G
    command: [ "-t", "86400" ] # time to live
  varnish-admin:
    image: varnish:7.3.0
    user: root # otherwise the varnish user does not have permissions to the mounted folder which is owner by root
    configs:
      - source: varnish-admin_vcl
        target: /etc/varnish/default.vcl
    depends_on:
      - linkeddatahub
    tmpfs: /var/lib/varnish/varnishd:exec
    environment:
      - VARNISH_SIZE=1G
    command: [ "-t", "86400", "-p", "timeout_idle=60s" ] # time to live
  varnish-end-user:
    image: varnish:7.3.0
    user: root # otherwise varnish user does not have permissions to the mounted folder which is owner by root
    configs:
      - source: varnish-end-user_vcl
        target: /etc/varnish/default.vcl
    depends_on:
      - linkeddatahub
    tmpfs: /var/lib/varnish/varnishd:exec
    environment:
      - VARNISH_SIZE=1G
    command: [ "-t", "86400", "-p", "timeout_idle=60s" ] # time to live
  email-server:
    image: namshi/smtp
    environment:
      - DISABLE_IPV6=true
configs:
  nginx_conf:
    content: |
      pid /tmp/nginx.pid;

      events { 
          worker_connections 1024;
      }

      http {
          upstream linkeddatahub {
              server varnish-frontend:6060;
          }

          limit_req_zone $$binary_remote_addr zone=linked_data:10m rate=15r/s;
          limit_req_zone $$binary_remote_addr zone=static_files:10m rate=20r/s;
          limit_req_status 429;

          client_max_body_size ${MAX_CONTENT_LENGTH:-2097152};

          # server with optional client cert authentication
          server {
              listen 8443 ssl;
              server_name ${HOST};
              ssl_certificate /etc/nginx/ssl/server.crt;
              ssl_certificate_key /etc/nginx/ssl/server.key;
              ssl_session_cache shared:SSL:1m;
              ssl_prefer_server_ciphers on;
              ssl_verify_client optional_no_ca;

              location / {
                  proxy_pass http://linkeddatahub;
                  #proxy_cache backcache;
                  limit_req zone=linked_data burst=30 nodelay;

                  proxy_set_header Client-Cert '';
                  proxy_set_header Client-Cert $$ssl_client_escaped_cert;

                  # add_header Cache-Control "public, max-age=86400";
              }

              location ^~ /uploads/ {
                  proxy_pass http://linkeddatahub;
                  limit_req zone=static_files burst=20 nodelay;

                  proxy_set_header Client-Cert '';
                  proxy_set_header Client-Cert $$ssl_client_escaped_cert;

                  add_header Cache-Control "public, max-age=604800, immutable";
              }

              location ^~ /static/ {
                  proxy_pass http://linkeddatahub;
                  limit_req zone=static_files burst=50 nodelay;

                  add_header Cache-Control "public, max-age=604800, immutable";
              }
          }

          # server with client cert authentication on
          server {
              listen 9443 ssl;
              server_name ${HOST};
              ssl_certificate /etc/nginx/ssl/server.crt;
              ssl_certificate_key /etc/nginx/ssl/server.key;
              ssl_session_cache shared:SSL:1m;  
              ssl_prefer_server_ciphers on;
              ssl_verify_client optional_no_ca;

              location / {
                  proxy_pass http://linkeddatahub;
                  #proxy_cache backcache;
                  limit_req zone=linked_data burst=30 nodelay;

                  proxy_set_header Client-Cert '';
                  proxy_set_header Client-Cert $$ssl_client_escaped_cert;
              }

              location ^~ /static/ {
                  proxy_pass http://linkeddatahub;
                  limit_req zone=static_files burst=50 nodelay;
              }
          }

          server {
              listen 8080;
              server_name ${HOST};
          
              location / {
                  return 301 https://$$server_name:${HTTPS_PORT}$$request_uri;
              }
          }

      }
  varnish-frontend_vcl:
    content: |
      vcl 4.0;

      import std;

      backend default {
          .host = "linkeddatahub";
          .port = "7070";
          .first_byte_timeout = 60s;
      }

      acl local {
          "localhost";
      }

      acl remote {
      }

      sub vcl_recv {
          if (req.method == "PURGE") {
              if (!client.ip ~ local && !client.ip ~ remote) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }
              return (purge);
          }

          if (req.method == "BAN") { # supports only 2 URIs!
              if (!client.ip ~ local && !client.ip ~ remote) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }

              set req.http.X-Escaped-Request-URI-1 = regsub(req.http.X-Escaped-Request-URI, ",.*$", ""); # remove header value after comma
              set req.http.X-Escaped-Request-URI-2 = regsub(req.http.X-Escaped-Request-URI, "^.*,", ""); # remove header value before comma
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-1);
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-2);
              return (synth(200, "Banned"));
          }

          if (req.method != "GET" &&
            req.method != "HEAD" &&
            req.method != "PUT" &&
            req.method != "POST" &&
            req.method != "TRACE" &&
            req.method != "OPTIONS" &&
            req.method != "DELETE" &&
            req.method != "PATCH") {
              /* Non-RFC2616 or CONNECT which is weird. */
              return (pipe);
          }

          if (req.method != "GET" && req.method != "HEAD") {
              /* We only deal with GET and HEAD by default */
              return (pass);
          }
          if (req.http.Client-Cert) {
              /* Authenticated requests are not cacheable */
              return (pass);
          }
          if (req.http.Cookie) {
              # explicitly allow only cookies required by LDH server-side
              set req.http.Cookie = ";" + req.http.Cookie;
              set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
              set req.http.Cookie = regsuball(req.http.Cookie, ";(LinkedDataHub\.state|LinkedDataHub\.id_token)=", "; \1=");
              set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
              set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

              if (req.http.cookie ~ "^\s*$") {
                  unset req.http.cookie;
              }
          }

          return (hash);
      }

      sub vcl_backend_response {
          /* purge URLs after updates */
          if ((beresp.status == 200 || beresp.status == 201 || beresp.status == 204) && bereq.method ~ "POST|PUT|DELETE|PATCH") {
              set beresp.http.X-LinkedDataHub = "Banned";
              ban("req.url == " + bereq.url + " && req.http.host == " + bereq.http.host);
          }

          return (deliver);
      }
  varnish-admin_vcl:
    content: |
      vcl 4.0;

      import std;

      backend default {
          .host = "fuseki-admin";
          .port = "3030";
          .first_byte_timeout = 60s;
      }

      acl local {
          "localhost";
          "linkeddatahub";
      }

      sub vcl_recv {
          if (req.method == "PURGE") {
              if (!client.ip ~ local) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }
              return (purge);
          }

          if (req.method == "BAN") { # supports only 2 URIs!
              if (!client.ip ~ local) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }

              set req.http.X-Escaped-Request-URI-1 = regsub(req.http.X-Escaped-Request-URI, ",.*$", ""); # remove header value after comma
              set req.http.X-Escaped-Request-URI-2 = regsub(req.http.X-Escaped-Request-URI, "^.*,", ""); # remove header value before comma
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-1);
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-2);
              return (synth(200, "Banned"));
          }

          if (req.method != "GET" &&
            req.method != "HEAD" &&
            req.method != "PUT" &&
            req.method != "POST" &&
            req.method != "TRACE" &&
            req.method != "OPTIONS" &&
            req.method != "DELETE" &&
            req.method != "PATCH") {
              /* Non-RFC2616 or CONNECT which is weird. */
              return (pipe);
          }

          if (req.method != "GET" && req.method != "HEAD") {
              /* We only deal with GET and HEAD by default */
              return (pass);
          }

          return (hash);
      }

      sub vcl_backend_response {
          /* purge URLs after updates */
          if ((beresp.status == 200 || beresp.status == 201 || beresp.status == 204) && bereq.method ~ "POST|PUT|DELETE|PATCH") {
              set beresp.http.X-LinkedDataHub = "Banned";
              ban("req.url == " + bereq.url + " && req.http.host == " + bereq.http.host);
          }

          return (deliver);
      }
  varnish-end-user_vcl:
    content: |
      vcl 4.0;

      import std;

      backend default {
          .host = "fuseki-end-user";
          .port = "3030";
          .first_byte_timeout = 60s;
      }

      acl local {
          "localhost";
          "linkeddatahub";
      }

      sub vcl_recv {
          if (req.method == "PURGE") {
              if (!client.ip ~ local) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }
              return (purge);
          }

          if (req.method == "BAN") { # supports only 2 URIs!
              if (!client.ip ~ local) {
                  return (synth(403, "Unknown IP address '" + client.ip + "'. Access denied."));
              }

              set req.http.X-Escaped-Request-URI-1 = regsub(req.http.X-Escaped-Request-URI, ",.*$", ""); # remove header value after comma
              set req.http.X-Escaped-Request-URI-2 = regsub(req.http.X-Escaped-Request-URI, "^.*,", ""); # remove header value before comma
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-1);
              ban("req.url ~ " + req.http.X-Escaped-Request-URI-2);
              return (synth(200, "Banned"));
          }

          if (req.method != "GET" &&
            req.method != "HEAD" &&
            req.method != "PUT" &&
            req.method != "POST" &&
            req.method != "TRACE" &&
            req.method != "OPTIONS" &&
            req.method != "DELETE" &&
            req.method != "PATCH") {
              /* Non-RFC2616 or CONNECT which is weird. */
              return (pipe);
          }

          if (req.method != "GET" && req.method != "HEAD") {
              /* We only deal with GET and HEAD by default */
              return (pass);
          }

          return (hash);
      }

      sub vcl_backend_response {
          /* purge URLs after updates */
          if ((beresp.status == 200 || beresp.status == 201 || beresp.status == 204) && bereq.method ~ "POST|PUT|DELETE|PATCH") {
              set beresp.http.X-LinkedDataHub = "Banned";
              ban("req.url == " + bereq.url + " && req.http.host == " + bereq.http.host);
          }

          return (deliver);
      }
