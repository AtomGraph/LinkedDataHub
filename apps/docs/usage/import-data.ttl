@prefix ns:     <ns#> .
@prefix def:    <ns/default#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:	<http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix dct:	<http://purl.org/dc/terms/> .
@prefix sioc:	<http://rdfs.org/sioc/ns#> .
  
    <usage/import-data> a def:Item ;
        dct:title "Import data" ;
        dct:description "Learn how to map data to RDF and import it into the application" ;
        sioc:content """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">This guide describes how data files are converted to RDF and imported into the application dataset.</p>
    <p>A data import is a combination of 3 resources:</p>
    <dl>
        <dt>File</dt>
        <dd>An uploaded file holding the data to be converted to RDF and imported, such as CSV or XML file</dd>
        <dt>Mapping</dt>
        <dd>The converter that produces RDF. In case of CSV it is SPARQL <code>CONSTRUCT</code> query, in case of XML it
          is an XSLT stylesheet</dd>
        <dt>Target container</dt>
        <dd>The container to which converted items will be <a href="http-api#ld-post">POST</a>ed, skolemized against,
            and become its children</dd>
    </dl>
    <p>The import process runs in the background, i.e. the import item is created before the process completes.
        Currently the only way to determine when it completes is to refresh the import item and check the import
        status (completed/failed). Upon successful report, metadata such as the number of imported RDF triples is attached
        to the import.</p>
    <p>The converted RDF is validated against <a href="administration/model/#constraints">constraints</a>
        before import. Constraint violations, if any, are attached to the import item.</p>
    <div>
        <h2 id="import-csv">Import CSV</h2>
        <p><a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> is a plain-text format for
          tabular data. CSV import in LinkedDataHub consists of 2 steps:</p>
        <ol>
            <li>
                <a href="#generic-conversion">generic conversion</a>
            </li>
            <li>
                <a href="#vocabulary-conversion">vocabulary conversion</a>
            </li>
        </ol>
        <p>We provide an running example of CSV data that will be shown as RDF conversion in the following
            sections:</p>
        <pre>countryCode,latitude,longitude,name
AD,42.5,1.6,Andorra
AE,23.4,53.8,"United Arab Emirates"
AF,33.9,67.7,Afghanistan</pre>
        <div>
            <h3 id="generic-conversion">Generic conversion</h3>
            <p>The data table is converted to a graph by treating rows as resources, columns as predicates, and
              cells as <code>xsd:string</code> literals. The approach is the same as CSV on the Web
              <a href="https://www.w3.org/TR/2015/REC-csv2rdf-20151217/#dfn-minimal-mode">minimal mode</a>.</p>
              <pre>@base &lt;https://linkeddatahub.com/docs/imports/?forClass=...&gt; .

_:8228a149-8efe-448d-b15f-8abf92e7bd17
  &lt;#countryCode&gt; "AD" ;
  &lt;#latitude&gt; "42.5" ;
  &lt;#longitude&gt; "1.6" ;
  &lt;#name&gt; "Andorra" .

_:ec59dcfc-872a-4144-822b-9ad5e2c6149c
  &lt;#countryCode&gt; "AE" ;
  &lt;#latitude&gt; "23.4" ;
  &lt;#longitude&gt; "53.8" ;
  &lt;#name&gt; "United Arab Emirates" .

_:e8f2e8e9-3d02-4bf5-b4f1-4794ba5b52c9
  &lt;#countryCode&gt; "AF" ;
  &lt;#latitude&gt; "33.9" ;
  &lt;#longitude&gt; "67.7" ;
  &lt;#name&gt; "Afghanistan" .</pre>
        </div>
        <div>
            <h3 id="vocabulary-conversion">Vocabulary conversion</h3>
            <p>This step provides a semantic "lift" for the generic RDF output of the previous step by mapping it
                to classes and properties from specific vocabularies. The mapping is a user-defined SPARQL
                <code>CONSTRUCT</code> query which transforms <em>one row at a time</em>:</p>
            <pre><code>PREFIX  apl:  &lt;http://atomgraph.com/ns/platform/domain#&gt;
PREFIX  geo:  &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt;
PREFIX  dh:   &lt;https://www.w3.org/ns/ldt/document-hierarchy/domain#&gt;
PREFIX  dct:  &lt;http://purl.org/dc/terms/&gt;
PREFIX  rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX  xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX  foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

CONSTRUCT
  {
    ?item a def:Item .
    ?item dct:title ?name .
    ?item dh:slug ?countryCode .
    ?item foaf:primaryTopic ?country .
    ?country a ?type .
    ?country foaf:isPrimaryTopicOf ?item .
    ?country dct:identifier ?countryCode .
    ?country geo:lat ?lat .
    ?country geo:long ?long .
    ?country dct:title ?name .
  }
WHERE
  { 
    BIND(uri(concat(str(?base), "ns#Country")) AS ?type)
    BIND(bnode() AS ?item)
    ?country  &lt;#countryCode&gt;  ?countryCode ;
              &lt;#latitude&gt;     ?latString ;
              &lt;#longitude&gt;    ?longString ;
              &lt;#name&gt;         ?name
    BIND(xsd:float(?latString) AS ?lat)
    BIND(xsd:float(?longString) AS ?long)
  }</code></pre>
            <p>These are the rules that hold for mapping queries:</p>
            <ul>
                <li><code>BASE</code> is the request URI, predicate URIs are relative to it</li>
                <li>produce items (documents) and pair them with topic resources using
                    <code>foaf:primaryTopic</code>/<code>foaf:isPrimaryTopicOf</code> properties</li>
                <li>the result resources should be blank nodes and not URIs, as they will be skolemized
                    depending on their RDF types</li>
                <li><code>?base</code> binding is provided with the base URI of the current application</li>
                <li>use<code>OPTIONAL</code> for optional cell values</li>
                <li>use <code>BIND()</code> to introduce new values and/or cast literals to the appropriate result
                    datatype or URI</li>
            </ul>
            <p>We are planning to provide a UI-based mapping tool in the future.</p>
            <p>The result of our mapping using above data and query using binding <code>(?base,
                &lt;https://linkeddatahub.com/atomgraph/city-graph/&gt;)</code> (only the first resource is shown):</p>
            <pre>_:item a &lt;https://linkeddatahub.com/atomgraph/city-graph/ns/default#Item&gt; ;
    dct:title "Andorra" ;
    dh:slug "AD" ;
    foaf:primaryTopic _:country .

_:country a &lt;https://linkeddatahub.com/atomgraph/city-graph/ns#Country&gt; ;
    foaf:isPrimaryTopicOf _:item ;
    dct:identifier "AD" ;
    geo:lat 42.5 ;
    geo:long 1.6 ;
    dct:title "Andorra" .</pre>
        </div>
    </div>
    <p class="lead">If you are ready to import some CSV, see our step-by-step tutorial on <a href="../tutorials/import-csv-data">creating a CSV import</a>.</p>
</div>"""^^rdf:XMLLiteral ;
        rdfs:seeAlso <https://www.w3.org/TR/2015/REC-csv2rdf-20151217/>,
            <https://www.w3.org/TR/sparql11-query/#construct> .

    <https://www.w3.org/TR/2015/REC-csv2rdf-20151217/> dct:title "Generating RDF from Tabular Data on the Web" .
    <https://www.w3.org/TR/sparql11-query/#construct> dct:title "SPARQL 1.1 Query Language: CONSTRUCT" .