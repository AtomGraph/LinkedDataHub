@prefix ns:     <ns#> .
@prefix def:    <ns/default#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix dh:	<https://www.w3.org/ns/ldt/document-hierarchy/domain#> .
@prefix dct:	<http://purl.org/dc/terms/> .
@prefix sioc:	<http://rdfs.org/sioc/ns#> .

[] a def:Container ;
    dh:slug "model" ;
    dct:title "Manage model" ;
    dct:description "Learn to create and manage ontology classes, constraints, properties etc." ;
    sioc:content """<div xmlns="http://www.w3.org/1999/xhtml">
    <div>
        <h2 id="ontologies">Ontologies</h2>
        <p>Ontologies are sets of domain concepts. The domain can span both documents (information resources) and abstract/physical things
            (non-information resources).</p>
        <p>Ontologies can <a href="https://www.w3.org/TR/owl2-primer/#Ontology_Management">import other ontologies</a>, both user-defined
            and system ones provided by LinkedDataHub. The imports are retrieved during application initialization, and the ontology
            becomes a transitive union, i.e. is merged with its imports and imports of the imports etc.</p>
        <p>Main ontology properties:</p>
        <dl>
            <dt>Imports</dt>
            <dd>Ontology to be imported</dd>
            <dt>Version</dt>
            <dd>Unique version of this ontology</dd>
        </dl>
        <p>All concepts managed in the model and explained below (classes, constructors etc.) belong to exactly one ontology. The membership
           is specified using the <code>rdfs:isDefined</code> property.</p>
        <div>
            <h3>System ontologies</h3>
            <p class="text-center">
                <img src="../../uploads/74847ba3ea2f8862bcb0bd9e177517363de83e74" title="LinkedDataHub ontologies"></img>
            </p>
            <p>AtomGraph Platform (APL) is the default domain ontology used by LinkedDataHub.</p>
            <table class="table">
                <caption>Domain ontologies</caption>
                <thead>
                    <tr>
                        <th>Ontology</th>
                        <th>Title</th>
                        <th>Prefix</th>
                        <th>Imports</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><a id="apl-ont"><code>http://atomgraph.com/ns/platform/domain#</code></a></td>
                        <td>AtomGraph Platform</td>
                        <td><code>apl:</code></td>
                        <td><a href="#dh-ont"><code>dh:</code></a></td>
                    </tr>
                    <tr>
                        <td><a href="https://www.w3.org/ns/ldt/document-hierarchy/domain#" id="dh-ont"><code>https://www.w3.org/ns/ldt/document-hierarchy/domain#</code></a></td>
                        <td>Document hierarchy</td>
                        <td><code>dh:</code></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td><a href="https://www.w3.org/ns/ldt/core/domain#" id="c-ont"><code>https://www.w3.org/ns/ldt/core/domain#</code></a></td>
                        <td>Core</td>
                        <td><code>c:</code></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div>
        <h2 id="classes">Classes</h2>
        <p>Classes are simply RDFS classes. Usually the <a href="../dataset-structure">application dataset</a> contains class instances.</p>
        <p>Main class properties such as constructor and constraint are explained in the sub-sections below. Additional properties are:</p>
        <dl>
            <dt><a href="#constructors">Constructor</a></dt>
            <dd>Query that constructs new class instance</dd>
            <dt><a href="#constraints">Constraints</a></dt>
            <dd>Command or command template that validates class instance</dd>
            <dt>Path template</dt>
            <dd>Template of the URI that will be generated for a new instance of this class by means of skolemization. It reuses the JAX-RS URI template
                syntax but extends it in several ways.<br></br>
                If the template starts with a leading <code>/</code>, it is treated as absolute path (relative to the base URI), otherwise as path segment
                (relative to the request absolute path, e.g. to the URI of the container under which the instance resource is stored).<br></br>
                Template variables are set automatically from resource property values. A simple path syntax to navigate between connected resources and
                their properties: resources are separated by <code>.</code> and only the local names of properties are used.</dd>
            <dd>For example, consider that you are creating an instance of <code>:Person</code> class under <code>https://linkeddatahub.com/people/</code>,
                and you want the instance URI to be generated from its <code>foaf:familyName</code> value (lets suppose it is <code>"Berners-Lee"</code>).
                In that case you should define a path segment template <code>{familyName}</code>, and the instance URI will be skolemized as
                <code>https://linkeddatahub.com/people/Berners-Lee</code>.</dd>
            <dd>If, on the other hand, you want the instance to use the title of the document it is topic of, then you should define the segment
                template as <code>{isPrimaryTopicOf.title}</code>.</dd>
            <dt id="fragment">Fragment template</dt>
            <dd>Similarly to the segment template, this template defines the fragment part of URI for new instances of this class. It is useful for
                distinguishing information resources (documents) from non-information resources which have
                <a href="https://www.w3.org/TR/cooluris/#hashuri">hash URIs</a>.</dd>
            <dd>Continuing the example from above, fragment template <code>this</code> defined on the <code>:Person</code> class would generate
                <code>https://linkeddatahub.com/people/Berners-Lee#this</code> as instance URI.</dd>
        </dl>
        <div>
            <h3 id="constructors">Constructors</h3>
            <p>Constructors are SPARQL <code>CONSTRUCT</code> <a href="#queries">queries</a> that serve as templates for class instances.
                specify the properties (both mandatory and optional) that the instance is supposed to have, as well as expected datatypes of their
                values. Constructors are used in create/edit modes. A class can have multiple constructors.</p>
            <p>For example, one of the constructors of the <code>def:Container</code> and <code>def:Item</code> <a href="#classes">classes</a>:</p>
            <pre><code>PREFIX rdf:     &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX xsd:     &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX sioc:    &lt;http://rdfs.org/sioc/ns#&gt;
PREFIX dct:     &lt;http://purl.org/dc/terms/&gt;

CONSTRUCT {
  ?this sioc:content "&lt;div xmlns=\\"http://www.w3.org/1999/xhtml\\"&gt;&lt;/div&gt;"^^rdf:XMLLiteral .
}
WHERE {}</code></pre>
            <p>An instance of these classes by default have a content property with XML literal.</p>
            <p>LinkedDataHub reuses <a href="http://spinrdf.org/spin.html#spin-constructors">SPIN constructors</a> for the implementation, but adds a
                special syntax convention using blank nodes to indicate the expected resource type (<code>[ a ex:Person ]</code>) or literal datatype
                (<code>[ a xsd:string ]</code>).</p>
            <p>Note that classes inherit constructors from superclasses in runtime. Subclasses do not have redefine constructor properties already found
                in superclass constructors, only additional properties.</p>
        </div>
        <div>
            <h3 id="constraints">Constraints</h3>
            <p>Constraints are SPARQL <a href="#queries">queries</a> or <a href="#command-templates">command templates</a> that validate submitted
                RDF data during document creation and editing. Constraints are enforced for instances of sitemap classes on which they are defined and are
                used to check class instances for violations (missing mandatory properties, malformed values etc.). For example, an instance of
                <code>def:Item</code> without <code>dct:title</code> will fail validation because titles are mandatory for LinkedDataHub documents.</p>
            <p>LinkedDataHub reuses <a href="http://spinrdf.org/spin.html#spin-constraints">SPIN constraints</a>. Classes inherit constraints from superclasses.</p>
        </div>
        <div>
            <h3 id="restrictions">Restrictions</h3>
            <p></p>
        </div>
    </div>
    <div>
        <h2 id="properties">Properties</h2>
        <p>LinkedDataHub allows definition of new properties.</p>
    </div>
</div>"""^^rdf:XMLLiteral .