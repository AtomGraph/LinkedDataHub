@prefix ns:     <ns#> .
@prefix def:    <ns/default#> .
@prefix rdf:	<http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:	<http://www.w3.org/2001/XMLSchema#> .
@prefix dh:	<https://www.w3.org/ns/ldt/document-hierarchy/domain#> .
@prefix dct:	<http://purl.org/dc/terms/> .
@prefix sioc:	<http://rdfs.org/sioc/ns#> .

[] a def:Item ;
    dh:slug "using-ldt-templates" ;
    dct:title "Using LDT templates" ;
    dct:description "Learn how to use Linked Data Templates" ;
    sioc:content """<div xmlns="http://www.w3.org/1999/xhtml">
    <p class="lead">This guide explains how to use LDT templates to change the way your application operates</p>
    <p><a href="./#templates">Template</a> is a core concept in an <a href="https://atomgraph.github.io/Linked-Data-Templates/">Linked Data Templates</a>
        application ontology. It defines what SPARQL command gets executed when on the application's <a href="../../manage-apps#services">service</a> when a certain URI is requested on that
        application. The service is usually backed by a triplestore.</p>
    <p>When Linked Data is served from a triplestore, the RDF descriptions returned when URIs are dereferenced are often results of the same default SPARQL query template. A common one is
        <code>DESCRIBE ?this</code>, which returns all known triples about a resource identified here as <code>?this</code>. The final query is obtained from this template by setting
        the requested URI as the value of the <code>?this</code> variable.</p>
    <p>Templates allow you to customize this mechanism by only mapping a certain class of URIs to a certain SPARQL command. Moreover, they support write mode as well, by allowing mapping
        to SPARQL update. This means that different parts of your application's URI address space can change the dataset and respond in different ways when a software client interacts with
        them. This is a common requirement for real-world end-user applications backed by SPARQL services.</p>
    <div>
        <h2>Use case</h2>
        <p>Lets reuse a geospatial RDF dataset from the <a href="../../usage/import-data">CSV import example</a>: any number of countries with coordinates. It could look like this in a Trig
        syntax (the base URI is not relevant in this context):</p>
                <pre>@base &lt;https://linkeddatahub.com/atomgraph/city-graph/&gt;
@prefix def: &lt;ns/default#&gt;
@prefix ns:  &lt;ns#&gt;

{

    &lt;countries/AD&gt; a def:Item ;
        dct:title "Andorra" ;
        dh:slug "AD" ;
        foaf:primaryTopic &lt;countries/AD#this&gt; .

    &lt;countries/AD#this&gt; a ns:Country ;
        foaf:isPrimaryTopicOf &lt;countries/AD#this&gt; ;
        dct:identifier "AD" ;
        geo:lat 42.5 ;
        geo:long 1.6 ;
        dct:title "Andorra" .

}</pre>
        <p>By default, the resource URIs will match a default template, which depends on what <a href="../model/#ontologies">LDT ontologies</a> your application
            imports. But lets say that we want to override it with our own country-specific template, which:</p>
        <ul>
            <li>matches country document resources</li>
            <li>includes descriptions of nearby countries when dereferenced</li>
            <li>removes document as well as country when deleted</li>
        </ul>
    </div>
    <div>
        <h2>Template structure</h2>
        <p>Use case requirements above translate directly into main LDT template components:</p>
        <dl>
            <dt>Match</dt>
            <dd>Use <samp>/countries/{id}</samp> URI template to match only country document URIs and not others</dd>
            <dt>Query</dt>
            <dd>A proper solution would be to use GeoSPARQL here, but for the sake of this example we can retrieve nearby countries by filtering coordinates that are within a bounding
                box:</dd>
            <dd><pre><code>PREFIX  geo:  &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt;
PREFIX  dct:  &lt;http://purl.org/dc/terms/&gt;
PREFIX  foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

DESCRIBE ?this ?country ?nearbyCountry
WHERE
  { GRAPH ?g
      { ?this     foaf:primaryTopic  ?country .
        ?country  geo:lat            ?lat ;
                  geo:long           ?long
        OPTIONAL
          { GRAPH ?nearbyCountryGraph
              { ?nearbyCountry
                          geo:lat   ?nearbyLat ;
                          geo:long  ?nearbyLong
                FILTER ( ?country != ?nearbyCountry )
              }
          }
        FILTER ( ( ?nearbyLat &gt; ( ?lat - 10 ) ) &amp;&amp; ( ?nearbyLat &lt; ( ?lat + 10 ) ) )
        FILTER ( ( ?nearbyLong &gt; ( ?long - 10 ) ) &amp;&amp; ( ?nearbyLong &lt; ( ?long + 10 ) ) )
      }
  }</code></pre></dd>
            <dt>Update</dt>
            <dd><pre><code>PREFIX  foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

DELETE {
  GRAPH ?graph {
    ?this ?p ?o .
    ?country ?countryP ?countryO .
  }
}
WHERE
  { GRAPH ?graph
      { ?this ?p ?o
        OPTIONAL
          { ?this foaf:primaryTopic ?country .
            ?country ?countryP ?countryO
          }
      }
  }</code></pre></dd>
          <dt>Super-template</dt>
          <dd>Templates inherit properties from super-templates, to which they must be linked using the subclass relationship. If you know of an existing template that already defines the URI
              pattern, query/update etc. that you need, you may define your template as a sub-template of it. For example, an update analogous to the one above is defined on
              <code>aplt:Container</code> and <code>aplt:Item</code> templates in the APLT ontology.</dd>
        </dl>
    </div>
    <div>
        <h2>Execution</h2>
        <p>Now lets consider <code>GET</code> and <code>DELETE</code> requests to our country document URI <samp>https://linkeddatahub.com/atomgraph/city-graph/countries/AD</samp>.
            The URI will be set as the value of the variable <code>?this</code> before the query or update is executed. In other words, a variable binding <code>(?this,
            &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt;)</code> will be applied on the query/update string before execution.</p>
        <p><code>GET</code> request will invoke execution of this query:</p>
        <pre><code>PREFIX  geo:  &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt;
PREFIX  dct:  &lt;http://purl.org/dc/terms/&gt;
PREFIX  foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

DESCRIBE &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt; ?country ?nearbyCountry
WHERE
  { GRAPH ?g
      { &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt;     foaf:primaryTopic  ?country .
        ?country  geo:lat            ?lat ;
                  geo:long           ?long
        OPTIONAL
          { GRAPH ?nearbyCountryGraph
              { ?nearbyCountry
                          geo:lat   ?nearbyLat ;
                          geo:long  ?nearbyLong
                FILTER ( ?country != ?nearbyCountry )
              }
          }
        FILTER ( ( ?nearbyLat &gt; ( ?lat - 10 ) ) &amp;&amp; ( ?nearbyLat &lt; ( ?lat + 10 ) ) )
        FILTER ( ( ?nearbyLong &gt; ( ?long - 10 ) ) &amp;&amp; ( ?nearbyLong &lt; ( ?long + 10 ) ) )
      }
  }</code></pre>
        <p>The RDF result of the query will be returned as the Linked Data response body.</p>
        <p><code>DELETE</code> request will invoke execution of this update:</p>
        <pre><code>PREFIX  foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

DELETE {
  GRAPH ?graph {
    &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt; ?p ?o .
    ?country ?countryP ?countryO .
  }
}
WHERE
  { GRAPH ?graph
      { &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt; ?p ?o
        OPTIONAL
          { &lt;https://linkeddatahub.com/atomgraph/city-graph/countries/AD&gt; foaf:primaryTopic ?country .
            ?country ?countryP ?countryO
          }
      }
  }</code></pre>
    </div>
</div>"""^^rdf:XMLLiteral .